//=======================================
// 入出力データ構造
//=======================================
#ifndef __IO_DATA_STRUCT__
#define __IO_DATA_STRUCT__


namespace CustomDeepNNLibrary
{
	/** 入出力データの次元数 */
	const unsigned __int32 IODATA_DIMENTION_COUNT = 4;

	/** 入出力データ構造 */
	struct IODataStruct
	{
		/** 各軸ごとの要素数 */
		union
		{
			struct
			{
				unsigned __int32 t;
				unsigned __int32 x;
				unsigned __int32 y;
				unsigned __int32 z;
			};
			unsigned __int32 lpDim[IODATA_DIMENTION_COUNT];
		};
		/** 1要素が持つデータ数 */
		unsigned __int32 ch;

		IODataStruct(int ch=0, int x=1, int y=1, int z=1, int t=1)
			:	t	(t)
			,	x	(x)
			,	y	(y)
			,	z	(z)
			,	ch	(ch)
		{
		}
	};
}

#endif


/*

実際のデータ構造は
t=2,
X=3,
Y=4,
Z=2,
ch = 3
{
  { {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}} },
  { {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}} }
},
{
  { {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}} },
  { {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}},
    {{0,1,2}, {0,1,2}, {0,1,2}} }
},

*/

